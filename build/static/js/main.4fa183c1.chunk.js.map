{"version":3,"sources":["logo.svg","List.js","World.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","state","data","isFetching","error","fetch","then","response","blob","images","imageUrl","window","URL","webkitURL","createObjectURL","setState","this","src","alt","className","React","Component","World","json","result","statistic_taken_at","new_cases","new_deaths","total_cases","total_deaths","total_recovered","App","logo","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,qLCEtBC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAO,CAAEC,KAAM,GAAIC,YAAY,EAAMC,MAAO,MAHlC,E,gEAME,IAAD,OAChBC,MAAM,6FAA8F,CAChG,OAAU,MACV,QAAW,CACP,kBAAmB,qCACnB,iBAAkB,wDAGrBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IACMC,GADaC,OAAOC,KAAOD,OAAOE,WACZC,gBAAgBL,GAC5C,EAAKM,SAAS,CAACb,KAAMQ,EAAUP,YAAY,S,+BAS7C,IAAD,EAC+Ba,KAAKf,MAAjCC,EADH,EACGA,KAAMC,EADT,EACSA,WADT,EACqBC,MAE1B,OAAID,EAAmB,2CAInB,yBAAKc,IAAKf,EAAMgB,IAAI,GAAGC,UAAU,kB,GAnCXC,IAAMC,W,gBCAnBC,G,wDACjB,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAO,CAAEC,KAAM,GAAIC,YAAY,EAAMC,MAAO,MAHlC,E,gEAME,IAAD,OAChBC,MAAM,uEAAwE,CAC1E,OAAU,MACV,QAAW,CACP,kBAAmB,qCACnB,iBAAkB,wDAGrBC,MAAK,SAAAC,GAAQ,OAAIA,EAASgB,UAC1BjB,MAAK,SAAAkB,GACF,EAAKT,SAAS,CAACb,KAAMsB,EAAQrB,YAAY,S,+BAS3C,IAAD,EAC+Ba,KAAKf,MAAjCC,EADH,EACGA,KAAMC,EADT,EACSA,WADT,EACqBC,MAE1B,OAAID,EAAmB,2CAInB,wBAAIgB,UAAU,QACV,4BACI,yGAAqB,4BAAKjB,EAAKuB,qBAEnC,4BACI,yGAAqB,4BAAKvB,EAAKwB,YAEnC,4BACI,4HAAyB,4BAAKxB,EAAKyB,aAEvC,4BACI,yGAAqB,4BAAKzB,EAAK0B,cAEnC,4BACI,yGAAqB,4BAAK1B,EAAK2B,eAEnC,4BACI,iIAAyB,4BAAK3B,EAAK4B,uB,GAlDpBV,IAAMC,YCkB1BU,MAdf,WACE,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cACd,yBAAKF,IAAKe,IAAMd,IAAI,GAAGC,UAAU,aACjC,mDACA,4DAEJ,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcc,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.4fa183c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nexport default class List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state ={ data: {}, isFetching: true, error: null };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/random_masks_usage_instructions.php\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"ba93fb142dmshe40f2ac24d1897dp1e3b54jsnd84963926b4b\"\r\n            }\r\n        })\r\n            .then(response => response.blob())\r\n            .then(images => {\r\n                const urlCreator = window.URL || window.webkitURL;\r\n                const imageUrl = urlCreator.createObjectURL(images);\r\n                this.setState({data: imageUrl, isFetching: false })\r\n            })\r\n\r\n        // .catch(e => {\r\n        //     console.log(e);\r\n        //     this.setState({data: '', isFetching: false, error: e }));\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        const { data, isFetching, error } = this.state;\r\n\r\n        if (isFetching) return <div>...Loading</div>;\r\n\r\n\r\n        return  (\r\n            <img src={data} alt=\"\" className=\"list__img\"/>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class World extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state ={ data: {}, isFetching: true, error: null };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"ba93fb142dmshe40f2ac24d1897dp1e3b54jsnd84963926b4b\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({data: result, isFetching: false })\r\n            })\r\n\r\n        // .catch(e => {\r\n        //     console.log(e);\r\n        //     this.setState({data: '', isFetching: false, error: e }));\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        const { data, isFetching, error } = this.state;\r\n\r\n        if (isFetching) return <div>...Loading</div>;\r\n\r\n        // if (error) return <div>{`Error: ${e.message}`}</div>;\r\n        return (\r\n            <ul className=\"list\">\r\n                <li>\r\n                    <p>Статистика на:</p><h2>{data.statistic_taken_at}</h2>\r\n                </li>\r\n                <li>\r\n                    <p>Новых случаев:</p><h2>{data.new_cases}</h2>\r\n                </li>\r\n                <li>\r\n                    <p>Летальных за день:</p><h2>{data.new_deaths}</h2>\r\n                </li>\r\n                <li>\r\n                    <p>Всего случаев:</p><h2>{data.total_cases}</h2>\r\n                </li>\r\n                <li>\r\n                    <p>Всего смертей:</p><h2>{data.total_deaths}</h2>\r\n                </li>\r\n                <li>\r\n                    <p>Всего выздоровело:</p><h2>{data.total_recovered}</h2>\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport List from './List'\nimport logo from './logo.svg'\nimport './App.css';\nimport World from \"./World\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n          <img src={logo} alt=\"\" className=\"app-logo\" />\n          <h4>Coronavirus Monitor</h4>\n          <h6>for Polytologs & Virusologs</h6>\n      </header>\n      <World />\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}